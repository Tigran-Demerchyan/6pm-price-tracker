import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProductDeleteById } from './productDeleteAPI';


const initialState = {
    products: [],

};

export const fetchProductDeleteByIdAsync = createAsyncThunk(
    'products/fetchProductDeleteById',
    async (id) => {
        const response = await fetchProductDeleteById(id);

        return response;
    }
);


export const productDeleteSlice = createSlice({
    name: 'products',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        del(state, { payload }) {
            state = state.filter(({ id }) => id == payload)
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchProductDeleteByIdAsync.pending, (state) => {
                // state.status = 'loading';
            })
            .addCase(fetchProductDeleteByIdAsync.fulfilled, (state, action) => {


                state.products = action.payload;
            });
    },
});


export const { del } = productDeleteSlice.actions;

export const selectDelete = (state) => state.products.products;


export default productDeleteSlice.reducer;
